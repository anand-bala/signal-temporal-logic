#include "argus/ast/expression.hpp"
#include "utils/visit.hpp"

#include <atomic>
#include <memory>

namespace argus {

template <typename ExprType>
std::unique_ptr<Expr> Expr::make_expr(ExprType arg) {
  /// Initialize a static counter for the expressions generated by the library.
  static std::atomic_size_t id = 0; // Atomic access for concurrency
  /// Create a new Expression and assign it an id (static).
  auto expr  = std::make_unique<Expr>(std::move(arg));
  expr->m_id = id++;
  return expr;
}

std::string Expr::to_string() const {
  return utils::visit([](const auto& expr) { return expr.to_string(); }, *this);
} // namespace argus

} // namespace argus
